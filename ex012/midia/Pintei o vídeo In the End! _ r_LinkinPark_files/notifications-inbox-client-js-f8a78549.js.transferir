import{w as e,u as t,p as i,ak as s,l as o,a9 as n,r as a,a4 as r,x as d,c,_ as l,n as h,t as u,s as p,e as f,dB as b,dC as g,ar as m,dD as v,dE as k,d as y,ap as S,a0 as C,f as E,Y as I}from"./shell-44808257.js";import{r as T}from"./requestGql-6b437a7d.js";import{c as w}from"./index-81178085.js";import{I as U}from"./icon-overflow-horizontal-fill-b670541f.js";import"./shreddit-spoiler-56b168c9.js";var N;!function(e){e.HideNotification="hide_notification",e.HideSubreddit="hide_subreddit",e.HideUpdates="hide_updates",e.DisableNotificationType="disable_notification_type",e.BlockUser="block_user"}(N||(N={}));const x=({notificationType:t,notificationId:i,isViewed:s,isClicked:o,action:n})=>e({source:"inbox",action:n,noun:"inbox_notification"},{notification_type:t,inbox:{id:i,is_viewed:s,is_clicked:o}}),L=e=>R({...e,noun:"overflow_option"}),R=({notificationType:t,notificationId:i,isViewed:s,isClicked:o,noun:n,action:a="click",action_info_type:r})=>e({source:"inbox",action:a,noun:n},{notification_type:t,inbox:{id:i,is_viewed:s,is_clicked:o},...r&&{action_info_type:r}}),A=e=>Array.from(document.querySelectorAll('[data-id="notification-item-prevent-link"]')).some((t=>t.contains(e.target)));var _,O,P;!function(e){e.Popover="popover",e.Route="route"}(_||(_={})),function(e){e.NumNotifications="numNotifications",e.RenderType="renderType"}(O||(O={})),function(e){e.CursorForNextPage="nextPageCursor",e.HasRenderedEarlierHeader="hasRenderedEarlierHeader"}(P||(P={}));w(`/svc/shreddit/notifications-inbox-content/:${O.NumNotifications}/:${O.RenderType}`);let D=class extends(t(i(p))){constructor(){super(...arguments),this.isViewed=!1,this.isDeletedPost=!1,this.isRemovedPost=!1,this.notificationId="",this.messageType="",this.hasLink="",this.isHidden=!1,this.observer=null,this.handleVisibilityChange=([{isIntersecting:e}])=>{var t;e&&!this.isViewed&&(this.trackEvent((t=this.getTrackEventProperties(),x({...t,action:"view"}))),this.isViewed=!0,this.observer?.disconnect())},this.hideIfIsSelf=e=>{e===this.notificationId&&this.hide()},this.hide=()=>this.isHidden=!0,this.onClick=async t=>{(!this.hasLink||this.isDeletedPost||this.isRemovedPost||A(t))&&t.preventDefault();return!!t.target?.closest("notification-context-menu")||this.trackEvent((({notificationType:t,notificationId:i,isViewed:s,isClicked:o,clickTarget:n})=>e({source:"inbox",action:"click",noun:"inbox_notification"},{notification_type:t,action_info_position:"cta"===n?2:1,inbox:{id:i,is_viewed:s,is_clicked:o}}))({...this.getTrackEventProperties(),clickTarget:"notification"})),this.isDeletedPost?this.showAlert({message:"Desculpe, o post foi apagado"}):this.isRemovedPost&&this.showAlert({message:"O conteúdo não está mais disponível"}),await this.fireReadEvent(),!1},this.getUnreadChildElement=()=>this.querySelector(".unread-notification"),this.fireReadEvent=async()=>{if(this.getUnreadChildElement()){this.removeUnreadState();try{await T({operation:s.MarkNotificationRead,variables:{input:{notificationId:this.notificationId}}})}catch(e){}}},this.removeUnreadState=()=>this.getUnreadChildElement()?.classList.remove("unread-notification"),this.showAlert=({message:e})=>this.dispatchEvent(o("faceplate-alert",{level:n.warning,message:e})),this.getTrackEventProperties=()=>({notificationType:this.messageType,notificationId:this.notificationId,isViewed:this.isViewed,isClicked:!!this.getUnreadChildElement()})}connectedCallback(){super.connectedCallback(),this.observer=new IntersectionObserver(this.handleVisibilityChange,{root:document.querySelector('[data-id="notification-container-element"]'),threshold:.25}),this.observer.observe(this)}disconnectedCallback(){super.disconnectedCallback(),this.observer?.disconnect()}firstUpdated(){var e;this.trackEvent((e=this.getTrackEventProperties(),x({...e,action:"receive"}))),this.querySelector("a")?.addEventListener("click",this.onClick),this.subscribe(a.NotificationInboxNotificationHideEvent,this.hideIfIsSelf),this.subscribe(a.InboxReadAllEvent,this.removeUnreadState)}render(){return this.isHidden?r:d`<slot></slot>`}};D.styles=[c],l([h({type:Boolean,attribute:"is-viewed",reflect:!0})],D.prototype,"isViewed",void 0),l([h({type:Boolean,attribute:"is-deleted-post"})],D.prototype,"isDeletedPost",void 0),l([h({type:Boolean,attribute:"is-removed-post"})],D.prototype,"isRemovedPost",void 0),l([h({type:String,attribute:"notification-id"})],D.prototype,"notificationId",void 0),l([h({type:String,attribute:"message-type"})],D.prototype,"messageType",void 0),l([h({type:Boolean,attribute:"has-link"})],D.prototype,"hasLink",void 0),l([u()],D.prototype,"isHidden",void 0),D=l([f("notification-item")],D);let H=class extends p{constructor(){super(...arguments),this.isHidden=!1,this.colorMap={},this.hide=e=>{e.preventDefault(),this.isHidden=!0},this.onClick=e=>{A(e)&&e.preventDefault()}}firstUpdated(){this.querySelectorAll('[data-id="notification-dismissal-element"').forEach((e=>e.addEventListener("click",this.hide))),this.querySelectorAll("a").forEach((e=>e.addEventListener("click",this.onClick))),Object.entries(this.colorMap).forEach((([e,t])=>{this.style.setProperty(`--${e}`,t)}))}render(){return this.isHidden?r:d`<slot></slot>`}};H.styles=[c],l([u()],H.prototype,"isHidden",void 0),l([h({type:Object})],H.prototype,"colorMap",void 0),H=l([f("notification-inbox-banner")],H);const M=({notificationLevel:e,isEnablingUpdates:t})=>{if(t)switch(e){case b.Off:case null:return b.Low;case b.Low:case b.Frequent:default:return b.Frequent}else switch(e){case b.Frequent:return b.Low;case b.Low:default:return b.Off}};let F=class extends(t(i(p))){constructor(){super(...arguments),this.messageType="",this.notificationLevel=null,this.notificationId="",this.userId="",this.userName="",this.postId="",this.commentId="",this.subredditId="",this.isHideEligible=!1,this.isToggleUpdateFromSubredditEligible=!1,this.isToggleNotificationUpdateEligible=!1,this.isToggleLowUpdateFromSubredditEligible=!1,this.initialNotificationLevel=null,this.isNotificationLevelOff=()=>!this.notificationLevel||this.notificationLevel===b.Off,this.getIsRead=()=>!this.closest("notification-item")?.querySelector(".unread-notification"),this.shouldRenderHide=()=>this.isHideEligible,this.shouldRenderDisableUpdates=()=>this.isToggleNotificationUpdateEligible&&(this.postId||this.commentId),this.shouldRenderDisableUpdatesFromSubreddit=()=>this.subredditId&&this.isToggleUpdateFromSubredditEligible,this.shouldRenderBlockThisUser=()=>this.userId&&this.userName&&this.messageType&&[g.ChatAcceptInvite,g.ChatMessage,g.ChatMessageReaction,g.ChatRequest,g.AwardReceived].includes(this.messageType),this.shouldRenderSeeLessFromSubreddit=()=>this.subredditId&&this.isToggleLowUpdateFromSubredditEligible,this.hideNotification=async()=>{try{if((await m({operation:s.DeleteInboxNotifications,variables:{input:{notificationIds:[this.notificationId]}}})).data.deleteInboxNotifications?.ok)return this.showAlert({level:n.notice,message:"Sucesso! Você não verá notificações sobre isso no futuro"}),void this.publish(a.NotificationInboxNotificationHideEvent,this.notificationId)}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesFromSubreddit=async e=>{try{this.notificationLevel=e?this.initialNotificationLevel:b.Off;if((await m({operation:s.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:e,isSubredditUpdatesInterestingPostEnabled:!this.isNotificationLevelOff()}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:N.HideSubreddit,isDo:!e,doConfig:{message:"Sucesso! Você não verá mais notificações sobre este subreddit no futuro.",undoOnClick:()=>this.changeUpdatesFromSubreddit(!0)},undoConfig:{message:"Sucesso! A opção de ocultar notificações desse subreddit foi desativada."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=e?b.Off:this.initialNotificationLevel,this.showAlert({})},this.changeSeeLessFromSubreddit=async e=>{this.notificationLevel=M({isEnablingUpdates:e,notificationLevel:this.notificationLevel});try{if((await m({operation:s.UpdateSubredditNotificationSettings,variables:{input:{subredditId:this.subredditId,isUpdateFromSubredditEnabled:!this.isNotificationLevelOff(),isSubredditUpdatesInterestingPostEnabled:e}}})).data.updateSubredditNotificationSettings?.ok)return void this.handleAlerts({actionInfoType:N.DisableNotificationType,isDo:!e,doConfig:{message:"Sucesso! Você verá menos desse subreddit no futuro.",undoOnClick:()=>this.changeSeeLessFromSubreddit(!0)},undoConfig:{message:"Sucesso! A opção de ver menos desse subreddit foi cancelada."}})}catch(e){window.Sentry?.captureMessage(e)}this.notificationLevel=M({isEnablingUpdates:!e,notificationLevel:this.notificationLevel}),this.showAlert({})},this.changeUpdatesOnThisPost=async e=>{try{if((await m({operation:s.UpdatePostSendRepliesState,variables:{input:{postId:this.postId,sendRepliesState:e?v.Send:v.DoNotSend}}})).data.updatePostSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:N.HideUpdates,isDo:!e,doConfig:{message:"Sucesso! Você não verá mais notificações sobre este post no futuro.",undoOnClick:()=>this.changeUpdatesOnThisPost(!0)},undoConfig:{message:"Sucesso! A opção de ocultar notificações foi desativada."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUpdatesOnThisComment=async e=>{try{if((await m({operation:s.UpdateCommentSendRepliesState,variables:{input:{commentId:this.commentId,sendRepliesState:e?v.Send:v.DoNotSend}}})).data.updateCommentSendRepliesState?.ok)return void this.handleAlerts({actionInfoType:N.HideUpdates,isDo:!e,doConfig:{message:"Sucesso! Você não verá mais notificações sobre este comentário no futuro.",undoOnClick:()=>this.changeUpdatesOnThisComment(!0)},undoConfig:{message:"Sucesso! A opção de ocultar notificações foi desativada."}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.changeUserBlockStatus=async e=>{try{if((await m({operation:s.UpdateRedditorBlockState,variables:{input:{redditorId:this.userId,blockState:e}}})).data.updateRedditorBlockState?.ok)return void this.handleAlerts({actionInfoType:N.BlockUser,isDo:e===k.Blocked,doConfig:{message:`Você bloqueou u/${this.userName}.`,undoOnClick:()=>this.changeUserBlockStatus(k.None)},undoConfig:{message:`Você desbloqueou u/${this.userName}.`}})}catch(e){window.Sentry?.captureMessage(e)}this.showAlert({})},this.handleAlerts=({isDo:e,actionInfoType:t,doConfig:i,undoConfig:s})=>{e?this.showAlert({level:n.notice,message:i.message,undoOnClick:i.undoOnClick,actionInfoType:t}):this.showAlert({level:n.notice,message:s.message})},this.showAlert=({level:e=n.error,message:t="Algo deu errado",undoOnClick:i,actionInfoType:s})=>this.dispatchEvent(o("faceplate-alert",{level:e,message:t,namedContent:i&&s?{action:y({children:"Desfazer",attributes:{onclick:()=>{var e;i(),this.trackEvent((e=this.getTrackClickOptionProperties(s),R({...e,action:"undo",noun:"overflow_option"})))}}})}:void 0})),this.renderHideThisNotification=()=>this.renderMenuElement({label:"Ocultar esta notificação",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(N.HideNotification))),this.hideNotification()),dataTestId:"hide-this-notification"}),this.renderDisableUpdates=()=>this.renderMenuElement({label:"Não receber notificações sobre isso",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(N.HideUpdates))),this.postId?this.changeUpdatesOnThisPost(!1):this.changeUpdatesOnThisComment(!1)),dataTestId:"block-updates-from-post-or-comment"}),this.renderDisableUpdatesFromSubreddit=()=>this.renderMenuElement({label:"Não receber mais novidades desta comunidade",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(N.HideSubreddit))),this.changeUpdatesFromSubreddit(!1)),dataTestId:"block-updates-from-subreddit"}),this.renderBlockThisUser=()=>this.renderMenuElement({label:"Bloquear usuário ",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(N.BlockUser))),this.changeUserBlockStatus(k.Blocked)),dataTestId:"block-user"}),this.renderSeeLessFromSubreddit=()=>this.renderMenuElement({label:"Ver menos desta comunidade",onClick:()=>(this.trackEvent(L(this.getTrackClickOptionProperties(N.DisableNotificationType))),this.changeSeeLessFromSubreddit(!1)),dataTestId:"see-less"}),this.renderMenuElement=({label:e,onClick:t,dataTestId:i})=>d`\n ${S({onClick:t,label:e,attributes:{role:"menuitem","data-testid":i}})}\n `,this.onOpenMenu=()=>{return this.trackEvent((e=this.getTrackEventProperties(),R({...e,noun:"inbox_notification_overflow"})));var e},this.getTrackClickOptionProperties=e=>({...this.getTrackEventProperties(),action_info_type:e}),this.getTrackEventProperties=()=>({notificationId:this.notificationId,notificationType:this.messageType,isViewed:!0,isClicked:this.getIsRead()})}render(){const e=[this.shouldRenderHide()?this.renderHideThisNotification():null,this.shouldRenderSeeLessFromSubreddit()?this.renderSeeLessFromSubreddit():null,this.shouldRenderDisableUpdates()?this.renderDisableUpdates():null,this.shouldRenderBlockThisUser()?this.renderBlockThisUser():null,this.shouldRenderDisableUpdatesFromSubreddit()?this.renderDisableUpdatesFromSubreddit():null].filter(Boolean);return 0===e.length?r:d`\n <faceplate-dropdown-menu position="bottom-end">\n ${y({appearance:"plain",attributes:{"aria-label":"Abrir ações de notificações"},leadingIcon:U({size:C.Small}),size:E.Small})}\n <faceplate-tracker \n slot="menu" \n source="${"inbox"}" \n action="view" \n noun="${"inbox_notification_overflow"}" \n data-faceplate-tracking-context="${JSON.stringify(this.getTrackEventProperties())}" \n>\n <faceplate-menu slot="menu" class="block bg-neutral-background">\n ${e}\n </faceplate-menu>\n </faceplate-tracker>\n </faceplate-dropdown-menu>\n `}};F.styles=[c],l([h({type:String,attribute:"message-type"})],F.prototype,"messageType",void 0),l([h({type:String,attribute:"notification-level",reflect:!0})],F.prototype,"notificationLevel",void 0),l([h({type:String,attribute:"notification-id"})],F.prototype,"notificationId",void 0),l([h({type:String,attribute:"user-id"})],F.prototype,"userId",void 0),l([h({type:String,attribute:"user-name"})],F.prototype,"userName",void 0),l([h({type:String,attribute:"post-id"})],F.prototype,"postId",void 0),l([h({type:String,attribute:"comment-id"})],F.prototype,"commentId",void 0),l([h({type:String,attribute:"subreddit-id"})],F.prototype,"subredditId",void 0),l([h({type:Boolean,attribute:"is-hide-eligible"})],F.prototype,"isHideEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-update-from-subreddit-eligible"})],F.prototype,"isToggleUpdateFromSubredditEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-notification-update-eligible"})],F.prototype,"isToggleNotificationUpdateEligible",void 0),l([h({type:Boolean,attribute:"is-toggle-low-update-from-subreddit-eligible"})],F.prototype,"isToggleLowUpdateFromSubredditEligible",void 0),F=l([f("notification-context-menu")],F);let B=class extends I{constructor(){super(...arguments),this.trackExitEvent=()=>{this.trackEvent()}}get miniInboxTooltip(){return document.querySelector("#mini-inbox-tooltip")}connectedCallback(){super.connectedCallback(),this.source="inbox",this.action="exit",this.noun="mini_inbox",this.miniInboxTooltip?.addEventListener(this.closeEventName,this.trackExitEvent)}disconnectedCallback(){super.disconnectedCallback(),this.miniInboxTooltip?.removeEventListener(this.closeEventName,this.trackExitEvent)}get closeEventName(){return`${this.miniInboxTooltip?.tagName.toLowerCase()}:close`}};B=l([f("notification-inbox-exit-tracker")],B);let V=class extends(i(t(p))){constructor(){super(...arguments),this.fireReadAll=async()=>{try{this.trackEvent((({badgeCount:t})=>e({source:"inbox",action:"click",noun:"mark_all_as_read"},{action_info_type:t}))({badgeCount:this.getUnreadCount()})),this.publish(a.InboxReadAllEvent),this.publish(a.InboxCountChanged,0);(await m({operation:s.MarkPrivateMessageAsRead,variables:{input:{}}})).data.markPrivateMessageAsRead?.ok||this.dispatchErrorMessage()}catch(e){this.dispatchErrorMessage()}},this.getUnreadCount=()=>document.querySelector('[data-id="notification-count-element"]')?.getCount(),this.dispatchErrorMessage=()=>{this.dispatchEvent(o("faceplate-alert",{level:n.error,message:"Algo deu errado ao marcar todas as notificações como lidas"}))}}firstUpdated(){this.querySelector("*")?.addEventListener("click",this.fireReadAll)}render(){return d` <slot></slot> `}};V.styles=[c],V=l([f("mark-all-messages-read")],V);let q=class extends(i(p)){constructor(){super(...arguments),this.initialMessagesCount=0}async firstUpdated(){this.publish(a.InboxCountChanged,this.initialMessagesCount),await T({operation:s.UpdateInboxActivitySeenState,variables:{input:{lastSentAt:(new Date).toISOString()}}})}render(){return r}};q.styles=[c],l([h({type:Number,attribute:"initial-messages-count"})],q.prototype,"initialMessagesCount",void 0),q=l([f("mark-all-notifications-seen")],q);
//# sourceMappingURL=notifications-inbox-client-js-f8a78549.js.map
